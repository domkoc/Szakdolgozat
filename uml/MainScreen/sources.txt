@startuml
' STYLE START
hide empty members
skinparam shadowing false
' STYLE END


class "MainScreenPresentationModel" as MainScreenPresentationModel << (S, SkyBlue) struct >> { 
  ~profile : Profile 
}
class "MainScreenInteractorSuccess" as MainScreenInteractorSuccess << (E, LightSteelBlue) enum >> {  
}
class "MainScreenInteractorError" as MainScreenInteractorError << (E, LightSteelBlue) enum >> { 
  ~error(_:) 
}
class "MainScreenInteractorInput" as MainScreenInteractorInput << (P, GoldenRod) protocol >> { 
  ~getProfile(completion:)
  ~logout(completion:) 
}
class "MainScreenInteractor" as MainScreenInteractor << (C, DarkSeaGreen) >> { 
  -profileApi : ProfileAPIInput
  -authenticationService : AuthenticationService
  ~init(profileApi:authenticationService:) 
}
class "MainScreenInteractor" as MainScreenInteractor0 << (X, Orchid) extension >> { 
  getProfile(completion:)
  logout(completion:) 
}
class "MainScreenPresenterInput" as MainScreenPresenterInput << (P, GoldenRod) protocol >> { 
  ~view : MainScreenView?
  ~interactor : MainScreenInteractorInput
  ~loadProfileData()
  ~navigateToEvents()
  ~navigateToProfile(with:)
  ~logout() 
}
class "MainScreenPresenter" as MainScreenPresenter << (C, DarkSeaGreen) >> { 
  ~view : MainScreenView?
  ~interactor : MainScreenInteractorInput
  -coordinator : MainScreenCoordinatorInput
  -profilePresentationModel : Profile?
  ~init(coordinator:interactor:view:) 
}
class "MainScreenPresenter" as MainScreenPresenter1 << (X, Orchid) extension >> { 
  loadProfileData()
  navigateToEvents()
  navigateToProfile(with:)
  logout() 
}
class "MainScreenCoordinatorInput" as MainScreenCoordinatorInput << (P, GoldenRod) protocol >> { 
  ~navigateBackToRoot()
  ~navigateBackToLogin()
  ~navigateToProfile(with:)
  ~navigateToEvents() 
}
class "MainScreenCoordinator" as MainScreenCoordinator << (C, DarkSeaGreen) >> { 
  -rootViewController : UINavigationController
  -appCoordinator : AppCoordinator
  -profileApi : ProfileAPIInput
  ~init(rootViewController:appCoordinator:)
  ~start()
  ~navigateMainScreen() 
}
class "MainScreenCoordinator" as MainScreenCoordinator2 << (X, Orchid) extension >> { 
  navigateBackToRoot()
  navigateBackToLogin()
  navigateToProfile(with:)
  navigateToEvents() 
}
class "MainScreenViewControllerFactory" as MainScreenViewControllerFactory << (C, DarkSeaGreen) >> {  
}
class "MainScreenView" as MainScreenView << (P, GoldenRod) protocol >> { 
  ~presenter : MainScreenPresenterInput?
  ~loadProfileData(_:) 
}
class "MainScreenViewController" as MainScreenViewController << (C, DarkSeaGreen) >> { 
  ~label : UILabel!
  ~presenter : MainScreenPresenterInput?
  ~presentationModel : MainScreenPresentationModel?
  ~viewDidLoad()
  ~viewWillAppear(_:)
  -customizeViews()
  ~EventsButtonTapped(_:)
  ~profileButtonTapped(_:)
  ~logoutButtonTapped(_:) 
}
class "MainScreenViewController" as MainScreenViewController3 << (X, Orchid) extension >> { 
  loadProfileData(_:) 
}
Error -- MainScreenInteractorError : inherits
AnyObject <|.. MainScreenInteractorInput : inherits
MainScreenInteractorInput <|.. MainScreenInteractor : confirms to
AnyObject <|.. MainScreenPresenterInput : inherits
MainScreenPresenterInput <|.. MainScreenPresenter : confirms to
MainScreenCoordinatorInput <|.. MainScreenCoordinator : confirms to
BaseView <|.. MainScreenView : inherits
UIViewController <|-- MainScreenViewController : inherits
MainScreenView <|.. MainScreenViewController : confirms to
MainScreenInteractor <.. MainScreenInteractor0 : ext
MainScreenPresenter <.. MainScreenPresenter1 : ext
MainScreenCoordinator <.. MainScreenCoordinator2 : ext
MainScreenViewController <.. MainScreenViewController3 : ext
@enduml
